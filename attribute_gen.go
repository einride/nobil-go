package nobil

// Code generated by attributegen. DO NOT EDIT.

import (
	"fmt"
	"strconv"
)

const (
	AttributeID_Location AttributeID = "3"
	AttributeID_Availability AttributeID = "2"
	AttributeID_Open24h AttributeID = "24"
	AttributeID_ParkingFee AttributeID = "7"
	AttributeID_TimeLimit AttributeID = "6"
	AttributeID_RealTimeInformation AttributeID = "21"
	AttributeID_PublicFunding AttributeID = "22"
	AttributeID_VehicleType AttributeID = "17"
	AttributeID_Accessibility AttributeID = "1"
	AttributeID_ChargingCapacity AttributeID = "5"
	AttributeID_Connector AttributeID = "4"
	AttributeID_FixedCable AttributeID = "25"
	AttributeID_ChargeMode AttributeID = "20"
	AttributeID_PaymentMethod AttributeID = "19"
	AttributeID_Reservable AttributeID = "18"
	AttributeID_Manufacturer AttributeID = "23"
	AttributeID_Timestamp AttributeID = "16"
	AttributeID_PowerConsumption AttributeID = "11"
	AttributeID_ConnectorSensorStatus AttributeID = "10"
	AttributeID_ConnectorErrorStatus AttributeID = "9"
	AttributeID_ConnectorStatus AttributeID = "8"
	AttributeID_Voltage AttributeID = "12"
	AttributeID_MeterValue AttributeID = "13"
	AttributeID_LastUsage AttributeID = "15"
	AttributeID_AuxTypeId AttributeID = "14"
	AttributeID_EnergyCarrier AttributeID = "26"
	AttributeID_Evseid AttributeID = "27"
	AttributeID_ChargerId AttributeID = "28"
)

type Location  int

const (
	Location_Street Location = 1
	Location_CarPark Location = 2
	Location_Airport Location = 3
	Location_ShoppingCenter Location = 4
	Location_TransportHub Location = 5
	Location_HotelsAndRestaurants Location = 6
	Location_EnergyStation Location = 7
)

func (a Location) String() string {
	switch a {
	case Location_Street:
		return "Street"
	case Location_CarPark:
		return "Car park"
	case Location_Airport:
		return "Airport"
	case Location_ShoppingCenter:
		return "Shopping center"
	case Location_TransportHub:
		return "Transport hub"
	case Location_HotelsAndRestaurants:
		return "Hotels and serving"
	case Location_EnergyStation:
		return "Energy station"
	case -1:
		return ""
	default:
		return fmt.Sprintf("Location(%d)", a)
	}
}

func (a *Location) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["3"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = Location(v)
}

type Availability  int

const (
	Availability_Public Availability = 1
	Availability_Visitors Availability = 2
	Availability_Employees Availability = 3
	Availability_ByAppointment Availability = 4
	Availability_Residents Availability = 5
)

func (a Availability) String() string {
	switch a {
	case Availability_Public:
		return "Public"
	case Availability_Visitors:
		return "Visitors"
	case Availability_Employees:
		return "Employees"
	case Availability_ByAppointment:
		return "By appointment"
	case Availability_Residents:
		return "Residents"
	case -1:
		return ""
	default:
		return fmt.Sprintf("Availability(%d)", a)
	}
}

func (a *Availability) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["2"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = Availability(v)
}

type Open24h  int

const (
	Open24h_Yes Open24h = 1
	Open24h_No Open24h = 2
)

func (a Open24h) String() string {
	switch a {
	case Open24h_Yes:
		return "Yes"
	case Open24h_No:
		return "No"
	case -1:
		return ""
	default:
		return fmt.Sprintf("Open24h(%d)", a)
	}
}

func (a *Open24h) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["24"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = Open24h(v)
}

type ParkingFee  int

const (
	ParkingFee_Yes ParkingFee = 1
	ParkingFee_No ParkingFee = 2
)

func (a ParkingFee) String() string {
	switch a {
	case ParkingFee_Yes:
		return "Yes"
	case ParkingFee_No:
		return "No"
	case -1:
		return ""
	default:
		return fmt.Sprintf("ParkingFee(%d)", a)
	}
}

func (a *ParkingFee) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["7"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = ParkingFee(v)
}

type TimeLimit  int

const (
	TimeLimit_Yes TimeLimit = 1
	TimeLimit_No TimeLimit = 2
)

func (a TimeLimit) String() string {
	switch a {
	case TimeLimit_Yes:
		return "Yes"
	case TimeLimit_No:
		return "No"
	case -1:
		return ""
	default:
		return fmt.Sprintf("TimeLimit(%d)", a)
	}
}

func (a *TimeLimit) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["6"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = TimeLimit(v)
}

type RealTimeInformation  int

const (
	RealTimeInformation_Yes RealTimeInformation = 1
	RealTimeInformation_No RealTimeInformation = 2
)

func (a RealTimeInformation) String() string {
	switch a {
	case RealTimeInformation_Yes:
		return "Yes"
	case RealTimeInformation_No:
		return "No"
	case -1:
		return ""
	default:
		return fmt.Sprintf("RealTimeInformation(%d)", a)
	}
}

func (a *RealTimeInformation) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["21"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = RealTimeInformation(v)
}

type PublicFunding  int

const (
	PublicFunding_OsloKommune PublicFunding = 1
	PublicFunding_Transnova PublicFunding = 2
	PublicFunding_Other PublicFunding = 3
	PublicFunding_None PublicFunding = 4
	PublicFunding_ClimateStep PublicFunding = 5
)

func (a PublicFunding) String() string {
	switch a {
	case PublicFunding_OsloKommune:
		return "Oslo kommune"
	case PublicFunding_Transnova:
		return "Transnova"
	case PublicFunding_Other:
		return "Other"
	case PublicFunding_None:
		return "None"
	case PublicFunding_ClimateStep:
		return "Klimasteget"
	case -1:
		return ""
	default:
		return fmt.Sprintf("PublicFunding(%d)", a)
	}
}

func (a *PublicFunding) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["22"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = PublicFunding(v)
}

type VehicleType  int

const (
	VehicleType_AllVehicles VehicleType = 1
	VehicleType_ShortVehicles VehicleType = 2
	VehicleType_TwoWheelMopedsMotorcycles VehicleType = 3
	VehicleType_ElectricBikes VehicleType = 4
	VehicleType_PluginHybrids VehicleType = 5
	VehicleType_Van VehicleType = 6
	VehicleType_AllVehicleHydrogen VehicleType = 7
	VehicleType_HydrogenCar VehicleType = 8
	VehicleType_HydrogenTruck VehicleType = 9
)

func (a VehicleType) String() string {
	switch a {
	case VehicleType_AllVehicles:
		return "All vehicles"
	case VehicleType_ShortVehicles:
		return "Short vehicles"
	case VehicleType_TwoWheelMopedsMotorcycles:
		return "Two-wheel mopeds / motorcycles"
	case VehicleType_ElectricBikes:
		return "Electric bikes"
	case VehicleType_PluginHybrids:
		return "Plug-in hybrids"
	case VehicleType_Van:
		return "Van"
	case VehicleType_AllVehicleHydrogen:
		return "All hydrogen vehicles"
	case VehicleType_HydrogenCar:
		return "Hydrogen car"
	case VehicleType_HydrogenTruck:
		return "Hydrogen Truck"
	case -1:
		return ""
	default:
		return fmt.Sprintf("VehicleType(%d)", a)
	}
}

func (a *VehicleType) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["17"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = VehicleType(v)
}

type Accessibility  int

const (
	Accessibility_Open Accessibility = 1
	Accessibility_StandardKey Accessibility = 2
	Accessibility_Other Accessibility = 3
	Accessibility_Rfid Accessibility = 4
	Accessibility_Payment Accessibility = 5
	Accessibility_CellularPhone Accessibility = 6
)

func (a Accessibility) String() string {
	switch a {
	case Accessibility_Open:
		return "Open"
	case Accessibility_StandardKey:
		return "Standard key"
	case Accessibility_Other:
		return "Other"
	case Accessibility_Rfid:
		return "RFID"
	case Accessibility_Payment:
		return "Payment"
	case Accessibility_CellularPhone:
		return "Cellular phone"
	case -1:
		return ""
	default:
		return fmt.Sprintf("Accessibility(%d)", a)
	}
}

func (a *Accessibility) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["1"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = Accessibility(v)
}

type ChargingCapacity  int

const (
	ChargingCapacity_Unspecified ChargingCapacity = 0
	ChargingCapacity_BatteryExchange ChargingCapacity = 1
	ChargingCapacity_3point6KW230v1PhaseMax16a ChargingCapacity = 7
	ChargingCapacity_7point4KW230v1PhaseMax32a ChargingCapacity = 8
	ChargingCapacity_11KW400v3PhaseMax16a ChargingCapacity = 10
	ChargingCapacity_22KW400v3PhaseMax32a ChargingCapacity = 11
	ChargingCapacity_43KW400v3PhaseMax63a ChargingCapacity = 12
	ChargingCapacity_50KW500vdcMax100a ChargingCapacity = 13
	ChargingCapacity_100KW500vdcMax200a ChargingCapacity = 23
	ChargingCapacity_230v3PhaseMax16a ChargingCapacity = 16
	ChargingCapacity_230v3PhaseMax32a ChargingCapacity = 17
	ChargingCapacity_230v3PhaseMax63a ChargingCapacity = 18
	ChargingCapacity_20KW500vdcMax50a ChargingCapacity = 19
	ChargingCapacity_LessThen100KWAnd43KW500vdcMax200aAnd400v3PhaseMax63a ChargingCapacity = 20
	ChargingCapacity_LessThen100KWAnd22KW500vdcMax50aAnd400v3PhaseMax32a ChargingCapacity = 21
	ChargingCapacity_135KW480vdcMax270a ChargingCapacity = 22
	ChargingCapacity_150KWDc ChargingCapacity = 24
	ChargingCapacity_350KWDc ChargingCapacity = 25
	ChargingCapacity_350Bar ChargingCapacity = 26
	ChargingCapacity_700Bar ChargingCapacity = 27
	ChargingCapacity_50KW400vdcMax125a ChargingCapacity = 28
)

func (a ChargingCapacity) String() string {
	switch a {
	case ChargingCapacity_Unspecified:
		return "Unspecified"
	case ChargingCapacity_BatteryExchange:
		return "Battery exchange"
	case ChargingCapacity_3point6KW230v1PhaseMax16a:
		return "3,6 kW - 230V 1-phase max 16A"
	case ChargingCapacity_7point4KW230v1PhaseMax32a:
		return "7,4 kW - 230V 1-phase max 32A"
	case ChargingCapacity_11KW400v3PhaseMax16a:
		return "11 kW - 400V 3-phase max 16A"
	case ChargingCapacity_22KW400v3PhaseMax32a:
		return "22 kW - 400V 3-phase max 32A"
	case ChargingCapacity_43KW400v3PhaseMax63a:
		return "43 kW - 400V 3-phase max 63A"
	case ChargingCapacity_50KW500vdcMax100a:
		return "50 kW - 500VDC max 100A"
	case ChargingCapacity_100KW500vdcMax200a:
		return "100 kW - 500VDC max 200A"
	case ChargingCapacity_230v3PhaseMax16a:
		return "230V 3-phase max 16A"
	case ChargingCapacity_230v3PhaseMax32a:
		return "230V 3-phase max 32A"
	case ChargingCapacity_230v3PhaseMax63a:
		return "230V 3-phase max 63A"
	case ChargingCapacity_20KW500vdcMax50a:
		return "20 kW - 500VDC max 50A"
	case ChargingCapacity_LessThen100KWAnd43KW500vdcMax200aAnd400v3PhaseMax63a:
		return "Less then 100 kW + 43 kW - 500VDC max 200A + 400V 3-phase max 63A"
	case ChargingCapacity_LessThen100KWAnd22KW500vdcMax50aAnd400v3PhaseMax32a:
		return "Less then 100 kW + 22 kW - 500VDC max 50A + 400V 3-phase max 32A"
	case ChargingCapacity_135KW480vdcMax270a:
		return "135 kW - 480VDC max 270A"
	case ChargingCapacity_150KWDc:
		return "150 kW DC"
	case ChargingCapacity_350KWDc:
		return "350 kW DC"
	case ChargingCapacity_350Bar:
		return "350 bar"
	case ChargingCapacity_700Bar:
		return "700 bar"
	case ChargingCapacity_50KW400vdcMax125a:
		return "50 kW - 400VDC max 125A"
	case -1:
		return ""
	default:
		return fmt.Sprintf("ChargingCapacity(%d)", a)
	}
}

func (a *ChargingCapacity) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["5"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = ChargingCapacity(v)
}

type Connector  int

const (
	Connector_Schuko Connector = 14
	Connector_TeslaConnectorRoadster Connector = 29
	Connector_ChadeMo Connector = 30
	Connector_Type1 Connector = 31
	Connector_Type2 Connector = 32
	Connector_Type1Type2 Connector = 60
	Connector_BlueIndustrial3Pin Connector = 34
	Connector_BlueIndustrial4Pin Connector = 35
	Connector_RedIndustrial5Pin Connector = 36
	Connector_CcsCombo Connector = 39
	Connector_TeslaConnectorModel Connector = 40
	Connector_ComboAndChadeMo Connector = 41
	Connector_ChadeMoAndType2 Connector = 42
	Connector_ChadeMoAndComboAndAcType2 Connector = 43
	Connector_Type2AndSchuko Connector = 50
	Connector_Type2AndDanishSection1072D1 Connector = 51
	Connector_Hydrogen Connector = 70
)

func (a Connector) String() string {
	switch a {
	case Connector_Schuko:
		return "Schuko"
	case Connector_TeslaConnectorRoadster:
		return "Tesla Connector Roadster"
	case Connector_ChadeMo:
		return "CHAdeMO"
	case Connector_Type1:
		return "Type 1"
	case Connector_Type2:
		return "Type 2"
	case Connector_Type1Type2:
		return "Type1/Type2"
	case Connector_BlueIndustrial3Pin:
		return "Blue industrial 3-pin"
	case Connector_BlueIndustrial4Pin:
		return "Blue industrial 4-pin"
	case Connector_RedIndustrial5Pin:
		return "Red industrial 5-pin"
	case Connector_CcsCombo:
		return "CCS/Combo"
	case Connector_TeslaConnectorModel:
		return "Tesla Connector Model"
	case Connector_ComboAndChadeMo:
		return "Combo + CHAdeMO"
	case Connector_ChadeMoAndType2:
		return "CHAdeMO + Type 2"
	case Connector_ChadeMoAndComboAndAcType2:
		return "CHAdeMO + Combo + AC-Type2"
	case Connector_Type2AndSchuko:
		return "Type 2 + Schuko"
	case Connector_Type2AndDanishSection1072D1:
		return "Type 2 + Danish (Section 107-2-D1)"
	case Connector_Hydrogen:
		return "Hydrogen"
	case -1:
		return ""
	default:
		return fmt.Sprintf("Connector(%d)", a)
	}
}

func (a *Connector) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["4"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = Connector(v)
}

type FixedCable  int

const (
	FixedCable_Yes FixedCable = 1
	FixedCable_No FixedCable = 2
)

func (a FixedCable) String() string {
	switch a {
	case FixedCable_Yes:
		return "Yes"
	case FixedCable_No:
		return "No"
	case -1:
		return ""
	default:
		return fmt.Sprintf("FixedCable(%d)", a)
	}
}

func (a *FixedCable) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["25"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = FixedCable(v)
}

type ChargeMode  int

const (
	ChargeMode_Mode1 ChargeMode = 1
	ChargeMode_Mode2 ChargeMode = 2
	ChargeMode_Mode3 ChargeMode = 3
	ChargeMode_Mode4 ChargeMode = 4
)

func (a ChargeMode) String() string {
	switch a {
	case ChargeMode_Mode1:
		return "Mode 1"
	case ChargeMode_Mode2:
		return "Mode 2"
	case ChargeMode_Mode3:
		return "Mode 3"
	case ChargeMode_Mode4:
		return "Mode 4"
	case -1:
		return ""
	default:
		return fmt.Sprintf("ChargeMode(%d)", a)
	}
}

func (a *ChargeMode) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["20"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = ChargeMode(v)
}

type PaymentMethod  int

const (
	PaymentMethod_CellularPhone PaymentMethod = 1
	PaymentMethod_VisaMastercard PaymentMethod = 2
	PaymentMethod_MastercardVisa PaymentMethod = 3
	PaymentMethod_AmericanExpress PaymentMethod = 4
	PaymentMethod_Diners PaymentMethod = 5
	PaymentMethod_OtherCards PaymentMethod = 6
	PaymentMethod_Subscription PaymentMethod = 7
	PaymentMethod_CoinMachine PaymentMethod = 8
	PaymentMethod_MiscellaneousCards PaymentMethod = 9
	PaymentMethod_Miscellaneous PaymentMethod = 10
	PaymentMethod_CellularPhoneChargingCard PaymentMethod = 20
	PaymentMethod_VisaMastercardChargingCard PaymentMethod = 21
)

func (a PaymentMethod) String() string {
	switch a {
	case PaymentMethod_CellularPhone:
		return "Cellular phone"
	case PaymentMethod_VisaMastercard:
		return "VISA and Mastercard"
	case PaymentMethod_MastercardVisa:
		return "Mastercard and VISA"
	case PaymentMethod_AmericanExpress:
		return "American Express"
	case PaymentMethod_Diners:
		return "Diners"
	case PaymentMethod_OtherCards:
		return "Other cards"
	case PaymentMethod_Subscription:
		return "Subscription"
	case PaymentMethod_CoinMachine:
		return "Coin machine"
	case PaymentMethod_MiscellaneousCards:
		return "Miscellaneous Cards"
	case PaymentMethod_Miscellaneous:
		return "Miscellaneous"
	case PaymentMethod_CellularPhoneChargingCard:
		return "Cellular phone and Charging card"
	case PaymentMethod_VisaMastercardChargingCard:
		return "VISA, Mastercard, Charging card"
	case -1:
		return ""
	default:
		return fmt.Sprintf("PaymentMethod(%d)", a)
	}
}

func (a *PaymentMethod) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["19"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = PaymentMethod(v)
}

type Reservable  int

const (
	Reservable_Yes Reservable = 1
	Reservable_No Reservable = 2
)

func (a Reservable) String() string {
	switch a {
	case Reservable_Yes:
		return "Yes"
	case Reservable_No:
		return "No"
	case -1:
		return ""
	default:
		return fmt.Sprintf("Reservable(%d)", a)
	}
}

func (a *Reservable) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["18"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = Reservable(v)
}

type ConnectorSensorStatus  int

const (
	ConnectorSensorStatus_Vacant ConnectorSensorStatus = 0
	ConnectorSensorStatus_BusyCharging ConnectorSensorStatus = 1
)

func (a ConnectorSensorStatus) String() string {
	switch a {
	case ConnectorSensorStatus_Vacant:
		return "Vacant"
	case ConnectorSensorStatus_BusyCharging:
		return "Busy"
	case -1:
		return ""
	default:
		return fmt.Sprintf("ConnectorSensorStatus(%d)", a)
	}
}

func (a *ConnectorSensorStatus) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["10"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = ConnectorSensorStatus(v)
}

type ConnectorErrorStatus  int

const (
	ConnectorErrorStatus_InService ConnectorErrorStatus = 0
	ConnectorErrorStatus_ErrorOutOfService ConnectorErrorStatus = 1
)

func (a ConnectorErrorStatus) String() string {
	switch a {
	case ConnectorErrorStatus_InService:
		return "In service"
	case ConnectorErrorStatus_ErrorOutOfService:
		return "Error - out of service"
	case -1:
		return ""
	default:
		return fmt.Sprintf("ConnectorErrorStatus(%d)", a)
	}
}

func (a *ConnectorErrorStatus) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["9"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = ConnectorErrorStatus(v)
}

type ConnectorStatus  int

const (
	ConnectorStatus_Vacant ConnectorStatus = 0
	ConnectorStatus_BusyCharging ConnectorStatus = 1
	ConnectorStatus_Reserved ConnectorStatus = 2
)

func (a ConnectorStatus) String() string {
	switch a {
	case ConnectorStatus_Vacant:
		return "Vacant"
	case ConnectorStatus_BusyCharging:
		return "Busy (charging)"
	case ConnectorStatus_Reserved:
		return "Reserved"
	case -1:
		return ""
	default:
		return fmt.Sprintf("ConnectorStatus(%d)", a)
	}
}

func (a *ConnectorStatus) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["8"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = ConnectorStatus(v)
}

type EnergyCarrier  int

const (
	EnergyCarrier_Electricity EnergyCarrier = 1
	EnergyCarrier_Hydrogen EnergyCarrier = 2
)

func (a EnergyCarrier) String() string {
	switch a {
	case EnergyCarrier_Electricity:
		return "Electricity"
	case EnergyCarrier_Hydrogen:
		return "Hydrogen"
	case -1:
		return ""
	default:
		return fmt.Sprintf("EnergyCarrier(%d)", a)
	}
}

func (a *EnergyCarrier) unmarshalAttributes(attrs map[AttributeID]*Attribute) {
	attr, ok := attrs["26"]
	if !ok {
		*a = -1
		return
	}
	v, err := strconv.Atoi(string(attr.ValueID))
	if err != nil {
		*a = -1
		return
	}
	*a = EnergyCarrier(v)
}
